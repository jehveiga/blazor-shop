@page "/produtos"
@inject IProdutoService produtoService

@if (Produtos == null)
{
    <ExibirSpinner />
}
else
{
    <h3 class="mb-5 text-center">Produtos</h3>
    @if (Produtos.Count() > 0)
    {
        var produtosPorCategoria = from produto in Produtos
                                   group produto by produto.CategoriaId into prodPorCatGrupo
                                   orderby prodPorCatGrupo.Key
                                   select prodPorCatGrupo;
        @foreach (var prodGrupo in produtosPorCategoria)
        {
            <h4 class="text-center">@prodGrupo.FirstOrDefault(pg => pg.CategoriaId == prodGrupo.Key).CategoriaNome</h4>

            <div class="container d-flex flex-wrap">
                <ExibirProdutos Produtos="@prodGrupo"></ExibirProdutos>
            </div>
            <hr class="mb-2"/>
        }

    }
}

@code {
    [Inject]
    public ICarrinhoCompraService? CarrinhoCompraService { get; set; }

    [Inject]
    public IGerenciaProdutosLocalStorageService? GerenciaProdutosLocalStorageService { get; set; }

    [Inject]
    public IGerenciaCarrinhoItensLocalStorageService? GerenciaCarrinhoItensLocalStorageService { get; set; }

    public IEnumerable<ProdutoDto>? Produtos { get; set; }

    public string? MensagemErro { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LimpaLocalStorage();

            Produtos = await GerenciaProdutosLocalStorageService.GetCollection();

            var carrinhoCompraItens = await GerenciaCarrinhoItensLocalStorageService.GetCollection();
            var totalQuantidadeItens = carrinhoCompraItens.Sum(item => item.Quantidade);

            // Disparando o evento para notificar os assinantes do evento para ser atualizado a interface do usuário com quantidade de produtos do carrinho
            CarrinhoCompraService.RaiseEventOnCarrinhoCompraChanged(totalQuantidadeItens);
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }

    }

    // Limpar os dados para sempre obter os dados atualizado do servidor na inicialização da página
    private async Task LimpaLocalStorage()
    {
        await GerenciaProdutosLocalStorageService.RemoveCollection();
        await GerenciaCarrinhoItensLocalStorageService.RemoveCollection();
    }
}
