@page "/produtos"
@inject IProdutoService produtoService

@if (Produtos == null)
{
    <ExibirSpinner />
}
else
{
    <h3 class="mb-5 text-center">Produtos</h3>
    @if (Produtos.Count() > 0)
    {
        var produtosPorCategoria = from produto in Produtos
                                   group produto by produto.CategoriaId into prodPorCatGrupo
                                   orderby prodPorCatGrupo.Key
                                   select prodPorCatGrupo;
        @foreach (var prodGrupo in produtosPorCategoria)
        {
            <h4 class="text-center">@prodGrupo.FirstOrDefault(pg => pg.CategoriaId == prodGrupo.Key).CategoriaNome</h4>

            <div class="container d-flex flex-wrap">
                <ExibirProdutos Produtos="@prodGrupo"></ExibirProdutos>
            </div>
            <hr class="mb-2"/>
        }

    }
}

@code {
    [Inject]
    public ICarrinhoCompraService? CarrinhoCompraService { get; set; }

    public IEnumerable<ProdutoDto>? Produtos { get; set; }

    protected override async Task OnInitializedAsync()
    {

        Produtos = await produtoService.GetItens();

        var carrinhoCompraItens = await CarrinhoCompraService.GetItens(UsuarioLogado.UsuarioId);
        var totalQuantidadeItens = carrinhoCompraItens.Sum(item => item.Quantidade);

        // Disparando o evento para notificar os assinantes do evento para ser atualizado a interface do usuário com quantidade de produtos do carrinho
        CarrinhoCompraService.RaiseEventOnCarrinhoCompraChanged(totalQuantidadeItens);

    }
}
